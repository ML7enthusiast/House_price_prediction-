# -*- coding: utf-8 -*-
"""house price prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JyNLhByDmy820VUdnUVrOnXD_sO0ELrg

**importing the dependencies**

work flow:
1. data
2. data preprocessing
3. data analysis
4. train test split
5. XGBoost Regressor
6. evaluation
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""**importing california house price dataset**"""

house_price_dataset= sklearn.datasets.fetch_california_housing()

print(house_price_dataset)

#loading the dataset to a pandas dataframe
house_price_dataframe=pd.DataFrame(house_price_dataset.data,columns=house_price_dataset.feature_names)

#print first 5 rows
house_price_dataframe.head()

#add the target(price) column to the dataframe
house_price_dataframe['price']=house_price_dataset.target
print(house_price_dataframe)
house_price_dataframe.head(5)

#checking the no of rows and columns in the dataframe
house_price_dataframe.shape

#check for missing values
house_price_dataframe.isnull().sum()

#statistical measures of the dataset
house_price_dataframe.describe()

"""**understanding the correlation between various features in the dataset**"""

correlation=house_price_dataframe.corr()

#constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,annot=True,annot_kws={'size':8},cmap='Blues')

"""**Spliting the data and target **"""

X=house_price_dataframe.drop(['price'],axis=1)
Y=house_price_dataframe['price']

print(X)
print(Y)

"""splitting the data into training data and testing data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""**MODEL TRAINING**

**XGBoost Regressor**
"""

#loading a model
model=XGBRegressor()

#training the model with X_train
model.fit(X_train,Y_train)

"""**Evaluation**

**Prediction on training data**
"""

training_data_prediction=model.predict(X_train)

print(training_data_prediction)

#R squared error
score_1=metrics.r2_score(Y_train,training_data_prediction)
#mean absolute error

score_2=metrics.mean_absolute_error(Y_train,training_data_prediction)
print("R squared error : ",score_1)
print("Mean absolute error : ",score_2)

"""**prediction on test data**"""

#accuracy for prediction on training data
#R squared error
score_1=metrics.r2_score(Y_test,test_data_prediction)
#mean absolute error

score_2=metrics.mean_absolute_error(Y_test,test_data_prediction)
print("R squared error : ",score_1)
print("Mean absolute error : ",score_2)
test_data_prediction=model.predict(X_test)

"""**visualizing the actual prices  and predicted prices**"""

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()